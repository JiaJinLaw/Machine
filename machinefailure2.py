# -*- coding: utf-8 -*-
"""MachineFailure2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QubduNG4VUCcHpqZyz6h3PERuTtVn-sh
"""


import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Add background image
background_image_path = "R.jfif"
st.image(background_image_path, use_column_width=True)  # Adjust 'use_column_width' based on your preference

st.markdown("# Predictive Maintenance Tool")
st.title("Machine Learning in Equipment Failures Prevention")

st.write(
    "In the manufacturing industry, high operating expenditures and operational disruptions, such as machine failures, impact production costs and delivery times, leading to poor customer service."
)

st.title('Customize your variables.')

type_options = ["Low", "Medium", "High"]
selected_type = st.selectbox("Type of Product Quality Variant", options=type_options)

# Input specific values using number_input
air_temperature = st.number_input("Air Temperature [K]", min_value=295, max_value=304, value=295, step=1)
process_temperature = st.number_input("Process Temperature [K]", min_value=300, max_value=320, value=300, step=1)
rotational_speed = st.number_input("Rotational Speed [rpm]", min_value=1000, max_value=3000, value=1000, step=100)
torque = st.number_input("Torque [Nm]", min_value=0, max_value=100, value=0, step=1)
tool_wear = st.number_input("Tool Wear [min]", min_value=0, max_value=300, value=0, step=1)

#input
user_input = {
    "Type": selected_type,
    "Air Temperature": air_temperature,
    "Process Temperature": process_temperature,
    "Rotational Speed": rotational_speed,
    "Torque": torque,
    "Tool Wear": tool_wear,
}

#result simulation
def predict_failure_type(user_input):
    tool_wear_threshold = 246
    torque_threshold = 60
    air_temperature_threshold = 300

    if user_input["Tool Wear"] > tool_wear_threshold:
        return "Tool wear failure"
    elif user_input["Torque"] > torque_threshold:
        return "Power failure"
    elif user_input["Air Temperature"] > air_temperature_threshold:
        return "Heat Dissipation failure"
    else:
        return "No Failure"

predicted_failure_type = predict_failure_type(user_input)

# Display the predicted failure type with red color if other than "No Failure"
if predicted_failure_type != "No Failure":
    color = "red"
else:
    color = "green"
    
# result
st.markdown(f"<h2 style='color: {color}'>Predicted Failure Type: {predicted_failure_type}</h2>", unsafe_allow_html=True)
